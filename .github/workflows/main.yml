name: Main Foodgram Workflow

on: [push]

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/src/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install flake8
          cd backend/src
          pip install -r requirements.txt
          pip install --upgrade urllib3 chardet
            

      - name: Run linter
        run: |
          cd backend/src
          flake8 --exclude=migrations

      - name: Run tests
        run: |
          cd backend/src
          python manage.py test
        env:
          DB_ENGINE: ${{ secrets.DB_ENGINE }}
          DB_NAME: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          DB_HOST: localhost
          DB_PORT: ${{ secrets.DB_PORT }}
      
      - name: Wait for PostgreSQL to start
        run: |
          while ! pg_isready -h localhost -p 5432 > /dev/null 2> /dev/null; do
            sleep 1
          done


  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
            
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
          context: backend/src
          file: backend/src/Dockerfile

  update_configs:
    name: Update docker-compose and nginx configs
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          source: "infra/docker-compose.yml,infra/nginx.conf"
          target: "home/${{ secrets.USERNAME }}"

  deploy:
    name: Deploy to Yandex.Cloud
    runs-on: ubuntu-latest
    needs: update_configs

    steps:
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo systemctl stop nginx
            sudo systemctl stop gunicorn

            sudo docker-compose stop
            sudo docker-compose rm -f backend

            touch .env
            echo "DB_ENGINE=${{ secrets.DB_ENGINE }}" > .env
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env

            cat .env

            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram-backend:latest
            sudo docker-compose up -d

            sudo docker-compose exec -T backend python manage.py migrate
            sudo docker-compose exec -T backend python manage.py collectstatic --no-input

